diff --git a/Cakefile.js b/Cakefile.js
index a70d4c7..3bb3e35 100644
--- a/Cakefile.js
+++ b/Cakefile.js
@@ -458,6 +458,8 @@ task('bench', 'quick benchmark of compilation time', () => {
 // Run the CoffeeScript test suite.
 var runTests = function (CoffeeScript) {
   CoffeeScript.register();
+  require('babel-register');
+  require('babel-polyfill');
   const startTime = Date.now();
   let currentFile = null;
   let passedTests = 0;
@@ -510,14 +512,14 @@ var runTests = function (CoffeeScript) {
   const files = fs.readdirSync('test');

   for (const file of Array.from(files)) {
-    if (helpers.isCoffee(file)) {
+    if (file.endsWith('.js')) {
       var filename;

       const literate = helpers.isLiterate(file);
       currentFile = (filename = path.join('test', file));
       const code = fs.readFileSync(filename);
       try {
-        CoffeeScript.run(code.toString(), { filename, literate });
+        require(`./${filename}`);
       } catch (error1) {
         const error = error1;
         failures.push({ filename, error });
diff --git a/check-coffeescript-examples.sh b/check-coffeescript-examples.sh
new file mode 100755
index 0000000..5d768d2
--- /dev/null
+++ b/check-coffeescript-examples.sh
@@ -0,0 +1,20 @@
+#!/bin/bash
+
+# Simple shell script to compare the decaffeinated CoffeeScript 1.12.7 compiler
+# with the official one, running it on all CoffeeScript files in the repo and
+# making sure the output is the same. For now, it just fails on the first error.
+
+set -e
+
+rm -rf examples-tmp
+mkdir examples-tmp
+cd examples-tmp
+git clone https://github.com/jashkenas/coffeescript.git --branch 1.12.7
+
+for path in $(find coffeescript -name '*.coffee'); do
+  echo "Comparing ${path}..."
+  (./coffeescript/bin/coffee --compile --print ${path} || echo 'ERROR') > expected.js
+  (../bin/coffee --compile --print ${path} || echo 'ERROR') > actual.js
+  cmp expected.js actual.js
+  echo 'Passed!'
+done
diff --git a/test/classes.js b/test/classes.js
index ffff3f6..fe1bf20 100644
--- a/test/classes.js
+++ b/test/classes.js
@@ -146,7 +146,8 @@ test("Overriding the static property new doesn't clobber Function::new", () => {

   Function.prototype.new = function () { return new (this)(...arguments); };

-  ok((TwoClass.new('three')).name === 'three');
+  // https://github.com/decaffeinate/decaffeinate/blob/master/docs/correctness-issues.md#static-property-inheritance-is-implemented-differently
+  // ok((TwoClass.new('three')).name === 'three');
   ok((new OneClass()).function === 'function');
   ok(OneClass.new === 'new');

@@ -610,7 +611,8 @@ test('variables in constructor bodies are correctly scoped', () => {

   const a = new A();
   eq(a.captured().x, 10);
-  return eq(a.captured().y, 2);
+  // https://github.com/decaffeinate/decaffeinate/blob/master/docs/correctness-issues.md#executable-class-bodies-can-have-their-statements-reordered
+  return eq(a.captured().y, 20);
 });


@@ -671,7 +673,8 @@ test('ensure that constructors invoked with splats return a new object', () => {
   // Ensure that constructors invoked with splats cache the function.
   let called = 0;
   const get = function () { if (called++) { return false; } return (Type = class Type {}); };
-  return new get()(...Array.from(args || []));
+  // https://github.com/decaffeinate/decaffeinate/blob/master/docs/correctness-issues.md#classes-cannot-be-called-without-new
+  return new (get())(...Array.from(args || []));
 });

 test("`new` shouldn't add extra parens", () => ok(new Date().constructor === Date));
@@ -1115,7 +1118,8 @@ test('#2599: other typed constructors should be inherited', () => {
   return ok(!((new Base()) instanceof Base));
 });

-test('#2359: extending native objects that use other typed constructors requires defining a constructor', () => {
+// https://github.com/decaffeinate/decaffeinate/blob/master/docs/correctness-issues.md#subclassing-built-ins-is-allowed-in-different-situations
+skippedTest('#2359: extending native objects that use other typed constructors requires defining a constructor', () => {
   class BrokenArray extends Array {
     method() { return 'no one will call me'; }
   }
diff --git a/test/cluster.js b/test/cluster.js
index aa78e2a..2c5a25d 100644
--- a/test/cluster.js
+++ b/test/cluster.js
@@ -12,6 +12,10 @@

 if (typeof testingBrowser !== 'undefined' && testingBrowser !== null) { return; }

+// CoffeeScript overwrites process.argv, which this test depends on, so manually
+// overwrite it instead.
+process.argv[1] = __filename;
+
 const cluster = require('cluster');

 if (cluster.isMaster) {
diff --git a/test/error_messages.js b/test/error_messages.js
index 18862a4..5c11837 100644
--- a/test/error_messages.js
+++ b/test/error_messages.js
@@ -84,7 +84,7 @@ if (typeof require !== 'undefined' && require !== null) {

   test('patchStackTrace line patching', () => {
     const err = new Error('error');
-    return ok(err.stack.match(/test[\/\\]error_messages\.coffee:\d+:\d+\b/));
+    return ok(err.stack.match(/test[\/\\]error_messages\.js:\d+:\d+\b/));
   });

   test('patchStackTrace stack prelude consistent with V8', () => {
diff --git a/test/importing.js b/test/importing.js
index f8dec2a..91e3edd 100644
--- a/test/importing.js
+++ b/test/importing.js
@@ -33,7 +33,8 @@ if ((typeof window === 'undefined' || window === null) && (typeof testingBrowser
     } else {
       global[magicKey] = {};
       if ((typeof require !== 'undefined' && require !== null ? require.extensions : undefined) != null) {
-        ok(require(__filename).method() === magicValue);
+        const requireUncached = require('require-uncached');
+        ok(requireUncached(__filename).method() === magicValue);
       }
       return delete global[magicKey];
     }
diff --git a/test/operators.js b/test/operators.js
index 72dec42..0f89850 100644
--- a/test/operators.js
+++ b/test/operators.js
@@ -268,7 +268,8 @@ test('#1100: precedence in or-test compilation of `in`', () => {
   return ok(!([1, 0 || 1].includes(0)));
 });

-test('#1630: `in` should check `hasOwnProperty`', () => {
+// https://github.com/decaffeinate/decaffeinate/blob/master/docs/correctness-issues.md#undefined-in-arr-returns-true-for-sparse-arrays-without-explicit-undefineds
+skippedTest('#1630: `in` should check `hasOwnProperty`', () => {
   let needle;
   return ok((needle = undefined, !Array.from({ length: 1 }).includes(needle)));
 });
@@ -471,7 +472,8 @@ test('#3363: Modulo operator coercing order', () => {
   return eq(5, count);
 });

-test('#3598: Unary + and - coerce the operand once when it is an identifier', () => {
+// https://github.com/decaffeinate/decaffeinate/blob/master/docs/correctness-issues.md#side-effects-in-valueof-and-getters-may-be-called-multiple-times
+skippedTest('#3598: Unary + and - coerce the operand once when it is an identifier', () => {
   // Unary + and - do not generate `_ref`s when the operand is a number, for
   // readability. To make sure that they do when the operand is an identifier,
   // test that they are consistent with another unary operator as well as another
diff --git a/test/scope.js b/test/scope.js
index 2c94e51..d35d984 100644
--- a/test/scope.js
+++ b/test/scope.js
@@ -118,19 +118,19 @@ test('loop variable should be accessible after for-from loop', () => {
   })());
   return eq(x, 2);
 });
-
-class Array {
+// https://github.com/decaffeinate/decaffeinate/blob/master/docs/correctness-issues.md#globals-like-object-and-array-may-be-accessed-by-name-from-generated-code
+class Array_ {
   static initClass() {
     this.prototype.slice = fail;
   }
 }
-Array.initClass(); // needs to be global
-class Object {
+Array_.initClass(); // needs to be global
+class Object_ {
   static initClass() {
     this.prototype.hasOwnProperty = fail;
   }
 }
-Object.initClass();
+Object_.initClass();
 test("#1973: redefining Array/Object constructors shouldn't confuse __X helpers", () => {
   const arr = [1, 2, 3, 4];
   arrayEq([3, 4], arr.slice(2));
diff --git a/test/support/helpers.js b/test/support/helpers.js
index 2d0578a..a50a6b7 100644
--- a/test/support/helpers.js
+++ b/test/support/helpers.js
@@ -9,6 +9,8 @@
 */
 // TODO: This file was created by bulk-decaffeinate.
 // Fix any style issues and re-enable lint.
+global.skippedTest = function (description, fn) {};
+
 /*
  * decaffeinate suggestions:
  * DS102: Remove unnecessary code created because of implicit returns
