diff --git a/spec/compile-cache-spec.js b/spec/compile-cache-spec.js
index 246efe2..958f281 100644
--- a/spec/compile-cache-spec.js
+++ b/spec/compile-cache-spec.js
@@ -108,7 +108,7 @@ describe('CompileCache', function () {
       waits(1)
       return runs(function () {
         error = new Error('Oops again')
-        expect(error.stack).toContain('compile-cache-spec.coffee')
+        expect(error.stack).toContain('compile-cache-spec.js')
         return expect(Array.isArray(error.getRawStack())).toBe(true)
       })
     })
@@ -120,7 +120,7 @@ describe('CompileCache', function () {
       Error.prepareStackTrace = originalPrepareStackTrace

       const error = new Error('Oops')
-      expect(error.stack).toContain('compile-cache-spec.coffee')
+      expect(error.stack).toContain('compile-cache-spec.js')
       return expect(Array.isArray(error.getRawStack())).toBe(true)
     })

@@ -133,7 +133,7 @@ describe('CompileCache', function () {
       }

       const error = new Error('Oops')
-      expect(error.stack).toContain('compile-cache-spec.coffee')
+      expect(error.stack).toContain('compile-cache-spec.js')
       expect(error.foo).toBe('bar')
       return expect(Array.isArray(error.getRawStack())).toBe(true)
     })
diff --git a/spec/config-spec.js b/spec/config-spec.js
index ac5db8e..7566278 100644
--- a/spec/config-spec.js
+++ b/spec/config-spec.js
@@ -1310,7 +1310,7 @@ foo:
             expect(fs.existsSync(atom.config.configDirPath)).toBeTruthy()
             expect(fs.existsSync(path.join(atom.config.configDirPath, 'packages'))).toBeTruthy()
             expect(fs.isFileSync(path.join(atom.config.configDirPath, 'snippets.cson'))).toBeTruthy()
-            expect(fs.isFileSync(path.join(atom.config.configDirPath, 'init.coffee'))).toBeTruthy()
+            expect(fs.isFileSync(path.join(atom.config.configDirPath, 'init.js'))).toBeTruthy()
             return expect(fs.isFileSync(path.join(atom.config.configDirPath, 'styles.less'))).toBeTruthy()
           })
         })
diff --git a/spec/integration/helpers/start-atom.js b/spec/integration/helpers/start-atom.js
index 6d5b6bb..795296d 100644
--- a/spec/integration/helpers/start-atom.js
+++ b/spec/integration/helpers/start-atom.js
@@ -103,7 +103,12 @@ const buildAtomClient = function (args, env) {
         .windowHandles(cb)
     }).addCommand('waitForPaneItemCount', function (count, timeout, cb) {
       return this.waitUntil(function () {
-        return this.execute(() => __guard__(atom.workspace != null ? atom.workspace.getActivePane() : undefined, x => x.getItems().length))
+        return this.execute(() => {
+          function __guard__ (value, transform) {
+            return (typeof value !== 'undefined' && value !== null) ? transform(value) : undefined
+          }
+          return __guard__(atom.workspace != null ? atom.workspace.getActivePane() : undefined, x => x.getItems().length)
+        })
           .then(({value}) => value === count)
       }
         , timeout)
diff --git a/static/index.html b/static/index.html
index 386481b..ab239dd 100644
--- a/static/index.html
+++ b/static/index.html
@@ -1,7 +1,7 @@
 <!DOCTYPE html>
 <html>
 <head>
-  <meta http-equiv="Content-Security-Policy" content="default-src * atom://*; img-src blob: data: * atom://*; script-src 'self'; style-src 'self' 'unsafe-inline'; media-src blob: data: mediastream: * atom://*;">
+  <meta http-equiv="Content-Security-Policy" content="default-src * atom://*; img-src blob: data: * atom://*; script-src 'self' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; media-src blob: data: mediastream: * atom://*;">
   <script src="index.js"></script>
 </head>
 <body tabindex="-1">
